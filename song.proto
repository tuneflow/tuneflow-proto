syntax = "proto2";

package song;

message Note {
  optional int32 pitch = 1;
  optional int32 velocity = 2;
  optional int32 start_tick = 3;
  optional float start_time = 4;
  optional int32 end_tick = 5;
  optional float end_time = 6;
  optional uint32 id = 7; // Assigned by client.
}

message TempoEvent {
  optional int32 ticks = 1;
	optional float bpm = 2;
	optional float time = 3;
}

message TimeSignatureEvent {
  optional int32 ticks = 1;
	optional int32 numerator = 2;
	optional int32 denominator = 3;
}

message InstrumentInfo {
  optional int32 program = 1;
  optional bool is_drum = 2;
}

message AudioPluginInfo {
  optional string tf_id = 1;
  optional bool is_enabled = 2;
  optional string local_instance_id = 3; // Used by local client only, do not upload.
  optional string base64_states = 4;
}

message AutomationTarget {
  enum TargetType {
    UNDEFINED = 0;
    VOLUME = 1;
    PAN = 2;
    AUDIO_PLUGIN = 3;
  }

  optional TargetType type = 1;
  optional string audio_plugin_id = 2; // Required when type is AUDIO_PLUGIN.
  optional string param_id = 3; // Required when type is AUDIO_PLUGIN.
}

/** The points and settings of an automation param. */
message AutomationValue {
  message ParamValue {
    optional int32 tick = 1;
    /** A value between 0 to 1, the actual value needs to be multiplied by the range of this param. */
    optional float value = 2;
    /** A unique id to identify this value. Scoped within this automation value. */
    optional int32 id = 3;
  }

  /** All the automation points. */
  repeated ParamValue points = 1;

  /** Whether this param is disabled. */
  optional bool disabled = 2;
}

/** The automation targets specified by the user, and their values. */
message AutomationData {
  /** The list of targets specified by the user. */
  repeated AutomationTarget targets = 1;

  /**
   * The actual settings and points of each target.
   * The key is the string-encoded automation target.
   */
  map<string,  AutomationValue> target_values = 2;
}

enum TrackType {
  UNDEFINED_TRACK = 0;
  /** A MIDI track can only play MIDI clips. */
  MIDI_TRACK = 1;
  /** An Audio track can only play audio clips. */
  AUDIO_TRACK = 2;
  MASTER_TRACK = 3;
  /** Aux track does not create clips, but takes bus inputs intended for mixing. */
  AUX_TRACK = 4;
}

message TrackSend {
  /** Rank of the output bus, ranges from 1 to Song.NUM_BUSES. */
  optional int32 output_bus_rank = 1;
  /** A float value from 0 to 1, indicating the send gain fader position. */
  optional float gain_level = 2;
  enum TrackSendPosition {
    UNDEFINED_TRACK_SEND_POSITION = 0;
    SEND_POSITION_PRE_FADER = 1;
    SEND_POSITION_POST_FADER = 2;
  }
  optional TrackSendPosition position = 3;
  optional bool muted = 4;
}

message TrackOutput {
  enum TrackOutputType {
    UNDEFINED_TRACK_OUTPUT_TYPE = 0;
    TRACK_OUTPUT_DEVICE = 1;
    TRACK_OUTPUT_TRACK = 2;
  }
  optional TrackOutputType type = 1;
  /** Optional, only effective when type is TRACK_OUTPUT_TRACK. */
  optional string track_id = 2;
  /** Optional, only effective when type is TRACK_OUTPUT_DEVICE. */
  optional string device_name = 3;
}

message AuxTrackData {
  /** Rank of the input bus, ranges from 1 to Song.NUM_BUSES, only effective if the track is AUX_TRACK. */
  optional int32 input_bus_rank = 1;
}

// Next id: 21.
message Track {
  optional InstrumentInfo instrument = 1;
  repeated Note notes = 2 [deprecated = true]; // Deprecated, use clips instead.
  repeated InstrumentInfo suggested_instruments = 3;
  optional string uuid = 4; // Assigned by client.
  /** Indicates the volume slider position (0 - 1). */
  optional float volume = 5;
  optional bool solo = 6;
  optional bool muted = 7;
  optional int32 rank = 8; // Assigned by client.
  optional int32 track_start_tick = 9; // Assigned by client.
  optional int32 track_end_tick = 10; // Assigned by client.
  optional AudioPluginInfo sampler_plugin = 11;
  /** Index to audio plugin map. */
  map<int32, AudioPluginInfo> audio_plugin = 12;
  repeated Clip clips = 13;
  /** A value ranging from -64 to 63, which corresponds to midi value 0-127. */
  optional int32 pan = 14;
  optional string name = 15;
  /** Each item corresponds to one param and all its automation points. */
  optional AutomationData automation = 16;
  optional TrackType type = 17;
  /** Data for AUX_TRACK only. */
  optional AuxTrackData aux_track_data = 18;
  /** Index to track send map. */
  map<int32, TrackSend> sends = 19;
  /**
    * If provided, specifies the custom output of the track.
    * If omitted, the track outputs to the default device.
    */
  optional TrackOutput output = 20;
}

enum ClipType {
  UNDEFINED_CLIP = 0;
  /** A MIDI clip can only play MIDI notes. */
  MIDI_CLIP = 1;
  /** An Audio clip can only play audio files. */
  AUDIO_CLIP = 2;
}

/** Contains raw audio file data. */
message AudioData {
  optional bytes data = 1;
  optional string format = 2;
}

message AudioClipData {
  /** Currently the local audio file path, can potentially be the URL of the audio file. If audio_data is set, this field can be omitted. */
  optional string audio_file_path = 1;
  /** Which tick the beginning of the audio is at. */
  optional int32 start_tick = 2;
  /** Duration of the audio, in seconds. */
  optional double duration = 3;
  /** A temporary holder of audio data used for transmitting data. Converted to local file after received by the client. If this field is set, audio_file_path can be omitted. */
  optional AudioData audio_data = 4;
  /** 
   * How fast this audio plays, time-stretch is applied when this ratio is set and not 1.
   * Ranging from 0.01 to 20.0, defaults to 1.
   */
  optional double speed_ratio = 5;
  /** Pitch offset in semitones, ranging from -24 to 24, defaults to 0. */
  optional double pitch_offset = 6;
}

// Next id: 7.
message Clip {
  optional string id = 1;
  optional int32 clip_start_tick = 2;
  optional int32 clip_end_tick = 3;
  // Notes will use absolute ticks.
  // This will be all the notes in the clip, including
  // those that may not be in the clip's range.
  // Needs to be present when type is MIDI_CLIP.
  repeated Note notes = 4;
  optional string name = 5;
  optional ClipType type = 6;
  // Needs to be present when type is AUDIO_CLIP.
  optional AudioClipData audio_clip_data = 7;
}

message StructureMarker {
  optional int32 tick = 1;
  enum StructureType {
    UNKNOWN = 0;
    INTRO = 1;
    VERSE = 2;
    CHORUS = 3;
    BRIDGE = 4;
    OUTRO = 5;
    PRE_CHORUS = 6;
    POST_CHORUS = 7;
    FILL = 8;
    CUSTOM = 9;
  }
  optional StructureType type = 2;
  /** When type is `CUSTOM`, this specifies the name of the structure. */
  optional string custom_name = 3;
}

message Bus {
  /** Rank of the bus, ranges from 1 to Song.NUM_BUSES. */
  optional int32 rank = 1;
  optional string name = 2;
}

message Song {
  optional int32 PPQ = 1;
  repeated TempoEvent tempos = 2;
  repeated TimeSignatureEvent time_signatures = 3;
  optional int32 last_tick = 4;
  optional float duration = 5;
  repeated Track tracks = 6;
  /* Master track does not contain clips, it controls the overall volume and audio effects. */
  optional Track master_track = 7;
  repeated StructureMarker structures = 8;
  repeated Bus buses = 9;
  repeated LyricLine lyrics = 10;
}

message LyricLine {
  message LyricWord {
    optional int32 start_tick = 1;
    optional int32 end_tick = 2;
    optional string word = 3;
  }
  repeated LyricWord words = 1;
}
